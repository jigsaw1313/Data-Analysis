# -*- coding: utf-8 -*-
"""Taxis_SeabornLib_Data_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gqkJ0eS3d_kIMbxcBdIptnmOzeNEljgI

# Load Libraries
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

"""# Load Dataset"""

df = sns.load_dataset('taxis')
df.head()

"""# Dataset Analysis"""

# Overall view of datafram
df.info()

# Missing Values
df.isnull().sum()

df.describe().T

# check shape of dataframe
df.shape

# check data types
df.dtypes

# Check categorical feature's values
for col in df.select_dtypes('object'):
  print(f"\n{col}'s Unique Values:")
  print(df[col].value_counts())
  print("*" * 30)

"""# Data Preprocessing

## Data Cleaning
"""

# There not much NaNs , so i will drop them all.
df.dropna(inplace=True)

df.info() # check dataframe

"""## Feature Engineering

## Datetime
"""

# Extract day, month and year from pickup feature
df['trip_day'] = df['pickup'].dt.day
df['trip_month'] = df['pickup'].dt.month
df['trip_year'] = df['pickup'].dt.year

"""## Tip Percentage Of Fare"""

df['tip_percent'] = (df['tip'] / df['fare']) * 100

"""# Exploratory Data Analysis

## Outliers
"""

def outlier(col):
  plt.figure(figsize=(8, 4))
  plt.boxplot(col, meanline=True, data=df)
  plt.title(f"{col}'s Boxplot")
  plt.show()

outlier('total')

outlier('distance')

outlier('tip')

outlier('fare')

outlier('tolls')

"""## Distributions"""

def get_dist(col):
  # Get mean , median
  # Calculate mean and median
  mean_val = df[col].mean()
  median_val = df[col].median()

  # Plot Histograim
  sns.set_style('dark')
  plt.figure(figsize=(6, 6))
  sns.histplot(data=df, x=col, bins=80, kde=True, color='blue', edgecolor='black')

  # Plot mean and median as vertical lines
  plt.axvline(mean_val, color='red', linestyle='--', label=f'Mean: {mean_val:.2f}')
  plt.axvline(median_val, color='yellow', linestyle='--', label=f'Median: {median_val:.2f}')

  # Add title and x, y label
  plt.title(f"Distribution Of {col}")
  plt.xlabel(f"{col}")
  plt.ylabel("Frequency")
  plt.xticks(fontsize=12)
  plt.yticks(fontsize=12)
  plt.grid(axis='y', linestyle='--', alpha=0.8)
  plt.legend(fontsize=10)
  # Show plot
  plt.show()

get_dist('total')

get_dist('distance')

get_dist('fare')

get_dist('tip')

get_dist('tolls')

get_dist('total')

"""## Frequncy Tables"""

def frequency_table(col, sort=False, n=10):
  return df.groupby(col)[col].count().sort_values(ascending=sort).to_frame().head(n)

frequency_table('payment')

frequency_table('color')

frequency_table('pickup_zone')

frequency_table('dropoff_zone')

frequency_table('pickup_borough')

frequency_table('dropoff_borough', sort=False, n=3)

"""## Fare / Distance"""

plt.figure(figsize=(14, 7))
sns.lineplot(data=df, y='distance', x='fare', color="blue")
plt.title("Fare / Distance")
plt.show()

"""## Hourly Demand"""

hourly_demand = df.groupby(df['pickup'].dt.hour).size().to_frame()
hourly_demand

plt.figure(figsize=(12, 6))
sns.lineplot(data=hourly_demand, color='blue', marker='o', markersize=8, linestyle='-')
plt.title("Hourly Demand")
plt.xlabel("Hour of Day")
plt.ylabel("Number of Trips")
plt.xticks(range(24), [f'{hour}:00' for hour in range(24)], rotation=45)
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

"""## Daily Demands"""

daily_demands = df.groupby('trip_day').size().to_frame()
daily_demands

plt.figure(figsize=(12, 6))
sns.lineplot(data=daily_demands, color='blue', marker='o', markersize=8, linestyle='-')
plt.title("Daily Demand")
plt.xlabel("Day of Month")
plt.ylabel("Number of Trips")
plt.xticks(range(1, 32), [f'{day}' for day in range(1, 32)], rotation=45)
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

df.head()

"""## Distribution of Pickup Zone"""

plt.figure(figsize=(25, 8))
sns.countplot(x='pickup_zone', data=df)
plt.title('Distribution of Pickup Zones')
plt.xlabel('Pickup Zone')
plt.ylabel('Count')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

"""## Distribution Of Dropoff Zone"""

plt.figure(figsize=(25, 8))
sns.countplot(x='dropoff_zone', data=df)
plt.title('Distribution of Dropoff Zones')
plt.xlabel('Dropoff Zone')
plt.ylabel('Count')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

"""## Most Visited Borough"""

regions_df = df['dropoff_borough'].value_counts().sort_values(ascending=False).head(5)
regions_df

plt.figure(figsize=(8, 4))
sns.barplot(x=regions_df.index, y=regions_df,  palette='Set1')
plt.title("Most Visited Borough")
plt.xlabel("Borough")
plt.ylabel("Frequency")
plt.show()

"""## Taxi's Color"""

plt.figure(figsize=(8, 4))
sns.barplot(x=df['color'].value_counts().index, y=df['color'].value_counts(), palette='Set1')
plt.title("Taxi's Color Count")
plt.xlabel("Color")
plt.ylabel("Count")
plt.show()

"""## Pickup Zone Barplot"""

pickup_df = df['pickup_zone'].value_counts().sort_values(ascending=False).head(10)
pickup_df

plt.figure(figsize=(10, 4))
sns.barplot(x=pickup_df.index, y=pickup_df, palette='Set1')
plt.title("Pickup Zones")
plt.xlabel("Zone Name")
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

"""## Dropoff Zone's Barplot"""

dropoff_df = df['dropoff_zone'].value_counts().sort_values(ascending=False).head(10)
dropoff_df

plt.figure(figsize=(10, 4))
sns.barplot(x=dropoff_df.index, y=dropoff_df,palette='Set1')
plt.title("Dropoff Zones")
plt.xlabel("Zone")
plt.ylabel("Count")
plt.xticks(rotation=45)
plt.show()

"""## Top 10 Average Distance By Dropoff and Pickup Zones"""

pickup_dropoff_df = df.groupby(['pickup_zone', 'dropoff_zone'])[[ 'distance']].mean()
pickup_dropoff_df = pickup_dropoff_df.nlargest(10, 'distance')
pickup_dropoff_df

plt.figure(figsize=(12, 6))
sns.barplot(x='pickup_zone', y='distance', hue='dropoff_zone', data=pickup_dropoff_df)
plt.title('Average Distance by Pickup and Dropoff Zones')
plt.xlabel('Pickup Zone')
plt.ylabel('Average Distance')
plt.xticks(rotation=45)
plt.legend(title='Dropoff Zone', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

"""## Top 10 Average Cost by Pickup and Dropoff Zone"""

cost_pickup_dropoff_df = df.groupby(['pickup_zone', 'dropoff_zone'])[['total']].mean()
cost_pickup_dropoff_df = cost_pickup_dropoff_df.nlargest(10, 'total')
cost_pickup_dropoff_df

plt.figure(figsize=(12, 6))
sns.barplot(x='pickup_zone', y='total', hue='dropoff_zone', data=cost_pickup_dropoff_df, palette='Set1')
plt.xlabel('Pickup Zone')
plt.ylabel('Average Cost(USD)')
plt.xticks(rotation=45)
plt.legend(title='Dropoff Zone', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

"""## Correlation Heatmap"""

# Correlation
df_corr = df.corr(numeric_only=True)
# Plot
plt.figure(figsize=(12, 6))
sns.heatmap(data=df_corr, annot=True, fmt='.2g')
plt.title("Correlation Heatmap")
plt.xticks(rotation=90)
plt.show()

"""## Regression Plot"""

def plot_regplot(x, y, data=df, title=None, xlabel=None, ylabel=None):

    plt.figure(figsize=(10, 6))
    sns.regplot(x=x, y=y, data=data)
    if title:
        plt.title(title)
    if xlabel:
        plt.xlabel(xlabel)
    if ylabel:
        plt.ylabel(ylabel)
    plt.grid(True)
    plt.show()

plot_regplot('total', 'distance', data=df, title="total Vs distance", xlabel='total', ylabel='distance')

plot_regplot('total', 'fare', data=df, title="total Vs fare", xlabel='total', ylabel='fare')

plot_regplot('total', 'tip', data=df, title="total Vs tip", xlabel='total', ylabel='tip')

plot_regplot('total', 'tolls', data=df, title="total Vs tolls", xlabel='total', ylabel='tolls')

