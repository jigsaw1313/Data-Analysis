# -*- coding: utf-8 -*-
"""Maven_Roasters_DataAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bf4O5kmc1bAgT4z5Al2TdTRDff5e-yTS

# Load Libraries and Dataset
"""

# Google Colab
from google.colab import drive
drive.mount('/content/drive')

# Load libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load Dataset
# Dataset Source: https://www.kaggle.com/datasets/agungpambudi/trends-product-coffee-shop-sales-revenue-dataset/data
df = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/DataSet/coffee-shop-sales-revenue.csv", delimiter='|')

"""# Dataset Analysis"""

df.head()

df.info()

"""* Dataset does not contain NaN values
* There are 5 numeric feature & 6 object features
"""

# statistical summary
df.describe().T

df.shape

df.isnull().sum() # To be sure about NaNs

# Check Duplicates
df.duplicated().sum()

"""* There are no duplicate rows"""

# Check columns name
df.columns

# Check categorical features unique values
categorical_features = ['store_location', 'product_category', 'product_type', 'product_detail']
for cat in categorical_features:
  print(f"{cat} Unique Values:")
  print(df[cat].unique())
  print(f"\n{cat}'s Total Unique Values {df[cat].nunique()}")
  print("*" * 30)

"""# Preprocessing and Data Cleaning

### Convert `transaction_time` and `transaction_date` to datetime
"""

df['transaction_date'] = pd.to_datetime(df['transaction_date'])
df['transaction_time'] = pd.to_datetime(df['transaction_time'])

"""### Extract `day`, `month`, `year` and `hour` of transaction - Feature Engineering"""

df['transaction_day'] = df['transaction_date'].dt.day # extract day
df['transacation_month'] = df['transaction_date'].dt.month # extract month
df['transacation_year'] = df['transaction_date'].dt.year # extract year

df['transacation_hour'] = df['transaction_time'].dt.hour # Extract hour of transaction

df.info()

# drop "transaction_time"
df.drop(columns=['transaction_time', 'transaction_time'], inplace=True)

df.head()

"""### Add `total_sales`"""

df['total_sales'] = df['transaction_qty'] * df['unit_price']
df.head()

"""# Exploratory Data Analysis

### Count of Products Per Category
"""

plt.figure(figsize=(10, 6))
sns.countplot(data=df, x='product_category', palette='Set1')
plt.xlabel('Product Category')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

"""### Best Seller - Products"""

products_top10 = df['product_type'].value_counts().head(10)
products_top10

plt.figure(figsize=(8, 4))
sns.barplot(x=products_top10.index, y=products_top10, palette='Set1')
plt.xlabel("Product")
plt.ylabel("Total Product Sales")
plt.xticks(rotation=90)
plt.show()

"""### Best Seller - Category"""

category_top5 = df['product_category'].value_counts().sort_values(ascending=False).head(5)
category_top5

plt.figure(figsize=(8, 4))
sns.barplot(x=category_top5.index, y=category_top5, palette='Set1')
plt.xlabel("Category")
plt.ylabel("Total Category Sales")
plt.xticks(rotation=90)
plt.show()

"""### Top Expensive Products"""

top_expensive_products = df.groupby('product_type')['unit_price'].max().sort_values(ascending=False).reset_index().head(10)
top_expensive_products

plt.figure(figsize=(12, 4))
sns.barplot(data=top_expensive_products, x='product_type', y='unit_price', palette='Set1')
plt.xlabel("Product Type")
plt.ylabel("Unit Price")
plt.xticks(rotation=45)
plt.show()

"""### Total Sales Per Store"""

plt.figure(figsize=(10, 4))
sns.barplot(data=df, x='store_location', y='total_sales', estimator=sum, palette='Set1')
plt.xlabel('Store Location')
plt.ylabel('Total Sales')
plt.xticks(rotation=45)
plt.show()

"""#### Pie Chart Of Transaction's Count Per Store"""

plt.figure(figsize=(10, 6))
store_location_counts = df['store_location'].value_counts()
plt.pie(store_location_counts, labels=store_location_counts.index, autopct='%1.1f%%', startangle=140)
plt.title('Transaction Counts by Store Location')
plt.axis('equal')
plt.show()

"""### Total Sales Average Per Day & Month"""

plt.figure(figsize=(10, 6))
df.groupby('transacation_month')['total_sales'].mean().plot()
plt.title('Average Unit Price Over Month')
plt.xlabel('Transaction Date')
plt.ylabel('Average Unit Price')
plt.show()

plt.figure(figsize=(10, 6))
df.groupby('transaction_day')['total_sales'].mean().plot()
plt.title('Average Unit Price Over Time')
plt.xlabel('Transaction Date')
plt.ylabel('Average Unit Price')
plt.show()

"""### Total Sales per `transacion_day`"""

plt.figure(figsize=(10, 6))
sns.barplot(data=df, x='transaction_day', y='total_sales', estimator=sum)
plt.title('Total Sales by Transaction Day')
plt.xlabel('Transaction Day')
plt.ylabel('Total Sales')
plt.xticks(rotation=45)
plt.show()

"""### Total Sales Per Category"""

sales_per_category = df.groupby('product_category')['total_sales'].agg('sum').sort_values(ascending=False).reset_index()
sales_per_category

plt.figure(figsize=(8, 4))
sns.barplot(data=sales_per_category, x='product_category', y='total_sales', palette='Set1')
plt.xlabel("Category")
plt.ylabel("Total Sales")
plt.xticks(rotation=45)
plt.show()

"""### Total Sales by `store_location` & `product_category`"""

sales_cate_loc = df.groupby(['store_location', 'product_category'])['total_sales'].agg('sum').sort_values(ascending=False).reset_index()
sales_cate_loc

plt.figure(figsize=(12, 6))
sns.barplot(data=df, x='store_location', y='total_sales', hue='product_category', palette='Set1')
plt.xlabel("Store's Location")
plt.ylabel("Total Sales")
plt.legend()
plt.xticks(rotation=90)
plt.show()

"""### Total Sales Per `store_location` & `month`"""

sales_store_month = df.groupby(['store_location', 'transacation_month'])['total_sales'].agg('sum').reset_index().sort_values(by='store_location')
sales_store_month

month_labels = {1: 'January', 2: 'February', 3: 'March', 4: 'April', 5: 'May', 6: 'June'}
plt.figure(figsize=(10, 6))
sns.barplot(data=sales_store_month, x='store_location', y='total_sales', hue=sales_store_month['transacation_month'].map(month_labels), palette="Set1")
plt.xlabel("Store Location")
plt.ylabel("Total Sales")
plt.legend(fontsize=10)
plt.show()

"""### Sales Per day"""

sales_per_day = df.groupby(['transacation_month', 'transaction_day'])['total_sales'].agg('sum').reset_index()

sales_per_day

# Define the mapping of month numbers to month names
month_labels = {1: 'January', 2: 'February', 3: 'March', 4: 'April', 5: 'May', 6: 'June',
                7: 'July', 8: 'August', 9: 'September', 10: 'October', 11: 'November', 12: 'December'}

# Plot the barplot with month names on the x-axis
plt.figure(figsize=(8, 4))
sns.barplot(x=sales_per_day['transacation_month'].map(month_labels), y='total_sales', data=sales_per_day)
plt.xlabel("Month")
plt.ylabel("Total Sales")
plt.xticks(rotation=45)  # Rotate the x-axis labels for better readability
plt.show()

"""#### Lineplot of Sales Per Month"""

plt.figure(figsize=(10, 4))
sns.lineplot(x=df['transaction_date'], y=df['total_sales'], data=df, palette='Set1')
plt.title("Trend of Total Revenue")
plt.ylabel("Total Revenue (in 1000)")
plt.show

"""### Total Orders Per `product_category`"""

orders_per_cate = df.groupby('product_category')['transaction_id'].nunique().sort_values(ascending=False)
orders_per_cate

plt.figure(figsize=(8, 4))
sns.barplot(x=orders_per_cate.index, y=orders_per_cate, palette='Set1')
plt.xlabel("Product")
plt.ylabel("Total Orders")
plt.xticks(rotation=45)  # Rotate the x-axis labels for better readability
plt.show()

"""### Generate WordCloud From `product_details`"""

from wordcloud import WordCloud
text = ' '.join(df['product_detail'])

# Generate the word cloud
wordcloud = WordCloud(width=800, height=400 ,background_color='black').generate(text)

# Plot the word cloud image
plt.figure(figsize=(10, 6))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')  # Remove axis
plt.show()

