# -*- coding: utf-8 -*-
"""weather.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M48fd6mkBiF7sIBq1O_KZXTpgNPjD2qz

# First Insight Of Dataset

__Libraries__
"""

import pandas as pd

"""_____________________

The Weather Dataset is a time-series data set with per-hour information about the weather conditions at a particular location. It records Temperature, Dew Point Temperature, Relative Humidity, Wind Speed, Visibility, Pressure, and Conditions.

_________________

__Loading Dataset__
"""

df = pd.read_csv('__ 001 Project-1-Weather-Dataset.csv')
df

"""# Analyzing Dataframe"""

df.head()

df.shape

df.index

df.columns

df.dtypes

"""### __unique() & nunique()__:

df['Weather']: This part of the expression refers to accessing the column named 'Weather' in the pandas DataFrame df. When you have a DataFrame df, you can access a specific column using this syntax. In this case, 'Weather' is the column name.

unique(): This method, when applied to a pandas Series (which is essentially a single column or row in a DataFrame), returns an array containing the unique elements in that Series. In the case of df['Weather'].unique(), it returns an array containing all the unique values present in the 'Weather' column of the DataFrame df.
"""

df.nunique()

df['Weather'].unique()

df['Weather'].nunique()

"""### .count()"""

df.count()

"""### .value_counts()"""

df.value_counts

"""### .info()"""

df.info()

"""__________________

# All the unique 'Wind Speed' values on data:
"""

df.head(3)

df.nunique()

df['Wind Speed_km/h'].nunique()

# Number of Unique Values
df['Wind Speed_km/h'].unique()

"""# Number of times when the weather is Clear"""

df.head(3)

# Method 1:
df['Weather'].value_counts()

"""___By using .value_counts() method we can see how many times each value has been repeated in that df or particular column___"""

# Method 2:
df[df['Weather'] == 'Clear']

"""___At bottom of output of previous cell is information of rows and columns which shows it has 1326 rows___"""

# Method 3:
df.groupby('Weather').get_group('Clear')

"""______At bottom of output of previous cell is information of rows and columns which shows it has 1326 rows___

# The number of times when the wind speed were '4km/h'
"""

df.head(3)

df[df['Wind Speed_km/h'] == 4]

"""# Null values in df"""

df.isnull().sum()

"""__There is no Null value in any column__"""

df.notnull().sum()

"""# Rename the column name 'Weather' of df to 'Weather_Condition'"""

df.rename(columns={'Weather': 'Weather_Condition'}, inplace=True)

df.head(3)

"""# Mean of 'Visibility'"""

# Method 1:
df['Visibility_km'].mean()

# Method 2:
df.describe()

"""# Std of 'Pressure'"""

# Method 1:
df['Press_kPa'].std()

# Method 2:
df.describe()

"""# The Variance of 'Relative Humidity'"""

df['Rel Hum_%'].var()

"""__The standard deviation is simply the square root of the variance. This is a useful and interpretable statistic because taking the square root of the variance (recalling that variance is the average squared difference) puts the standard deviation back into the original units of the measure we used.__

# All instances when 'Snow' was recorded
"""

# Method 1:
df[df['Weather_Condition'] == 'Snow']

# Method 2:
df['Weather_Condition'].value_counts()

# Method 3:
df.groupby('Weather_Condition').get_group('Snow')

# Method 4:
df['Weather_Condition'].str.contains('Snow').sum()

df[df['Weather_Condition'].str.contains('Snow')]

"""# All instances when wind speed is above 24 and visibility is 25"""

df.head(3)

df[(df['Wind Speed_km/h'] > 24) & (df['Visibility_km'] == 25)]

"""# The Mean value of each column agains each "Weather_Condition"
"""

df.head(3)

# Method1:
grouped_df = df.groupby('Weather_Condition')[['Temp_C', 'Dew Point Temp_C', 'Rel Hum_%', 'Wind Speed_km/h', 'Visibility_km', 'Press_kPa']]

# Displaying the resulting DataFrame
grouped_df.describe()

# Method 2:
# Before doing this method it is nessary to correct 'Date/Time' column format
df['Date/Time'] = pd.to_datetime(df['Date/Time'], format='%m/%d/%Y %H:%M')

# Grouping the DataFrame by 'Weather_Condition' and calculating the mean of each group
grouped_df = df.groupby('Weather_Condition').mean()

# Displaying the resulting DataFrame
grouped_df

"""__The describe() function in pandas provides a statistical summary of the numerical columns in a DataFrame. When you apply it to the grouped DataFrame grouped_df, it will provide descriptive statistics for each group in the Weather_Condition column.__

# Minumum and Maximum value of each column against 'Weather_Condition'
"""

df.groupby('Weather_Condition').min()

df.groupby('Weather_Condition').max()

"""# All rows where 'Weather_Condition' is Fog"""

df[df['Weather_Condition'] == 'Fog']

"""# All rows where Weather is Clear or Visitbility is above 40"""

df[(df['Weather_Condition'] == 'Clear') | (df['Visibility_km'] > 40)]

"""# All rows when:  
__1. Weather is Clear and Relative Humitidy is Greater than 50__  
__2. Visibility is above 40__

"""

df[(df['Weather_Condition'] == 'Clear') & (df['Rel Hum_%'] > 50) | (df['Visibility_km'] > 40)]

"""# Perform Some Visualization Analysis"""

import matplotlib.pyplot as plt
import seaborn as sns

df.head(5)

df.info()

"""## hist plot of Temp_C Column"""

df['Temp_C'].plot(kind='hist', bins = 20)

"""## Temp_C variation over time"""

plt.figure(figsize=(12,6))
plt.plot(df['Date/Time'], df['Temp_C'], marker='o', linestyle='-')
plt.xlabel('Date/Time')
plt.ylabel('Temperature (Celsius)')
plt.title('Temperature Variation over Time')
plt.show()

"""## boxplot of Dew Point by Weather Condition"""

plt.figure(figsize = (12,12))
sns.boxplot(x = 'Weather_Condition', y = 'Dew Point Temp_C', data = df)
plt.title("Dew Point Temperature Variation by Weather Condition")
plt.show()

"""## Scatter Plot Matrix for Multiple Variables:"""

sns.pairplot(df[['Temp_C', 'Dew Point Temp_C', 'Rel Hum_%', 'Wind Speed_km/h', 'Visibility_km', 'Press_kPa']])

"""## Correlation Matrix"""

correlation_matrix = df[['Temp_C', 'Dew Point Temp_C', 'Rel Hum_%', 'Wind Speed_km/h', 'Visibility_km', 'Press_kPa']].corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap')
plt.show()

"""## Wind speed over each Month"""

df['Month'] = df['Date/Time'].dt.month
plt.figure(figsize = (12, 8))
sns.barplot(x='Month', y='Wind Speed_km/h', data = df, errorbar = None)
plt.title("Wind Speen By Month")
plt.show()

"""## hist plot of numeric columns"""

df.hist(bins=20, figsize=(12,10))
plt.show()

"""## Line Plot for Visibility and Pressure"""

fig, ax1 = plt.subplots(figsize=(12,6))

color = 'tab:red'
ax1.set_xlabel('Date/Time')
ax1.set_ylabel('Visibility (km)', color=color)
ax1.plot(df['Date/Time'], df['Visibility_km'], color=color)
ax1.tick_params(axis='y', labelcolor=color)

ax2 = ax1.twinx()
color = 'tab:blue'
ax2.set_ylabel('Pressure (kPa)', color=color)
ax2.plot(df['Date/Time'], df['Press_kPa'], color=color)
ax2.tick_params(axis='y', labelcolor=color)

fig.tight_layout()
plt.show()

"""## joint plot fo Temp_C and Dew Point"""

sns.jointplot(x='Temp_C', y='Dew Point Temp_C', data=df, kind='reg')

