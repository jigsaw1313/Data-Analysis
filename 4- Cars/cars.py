# -*- coding: utf-8 -*-
"""cars.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L7L2NRVW9NFbtS5e1P6Oiz43UM742zHT

# Load the dataset and first insight of dataset
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.impute import SimpleImputer

# import dataset
df = pd.read_csv("__ 002 Project-2-Cars-Dataset.csv")

# check df
df.head(5)

df.info()

df.describe()

df.nunique()



"""# Cleaning Data"""

df.isnull().sum()

"""## Correct format of 'MSRP' & 'Invoice' column & correct column name & change dtype to int"""

def get_number(row):
    if isinstance(row, str):
        return (row.replace('$', '').replace(',', ''))
    else:
        return np.nan

df['MSRP'] = df['MSRP'].apply(get_number)

df['Invoice'] = df['Invoice'].apply(get_number)

# correct datatype
df['MSRP'] = pd.to_numeric(df['MSRP'], errors='ignore')
df['Invoice'] = pd.to_numeric(df['Invoice'], errors = 'ignore')

df.rename(columns={'MSRP' : 'MSRP_USD', 'Invoice' : 'Invoice_USD'}, inplace = True)

df.info()

"""## Fill missing values of numeric features"""

# this function will receive a column as parameter then it will apply Imputer on that specific column
def impute_column(cols):
    for col in cols:
        imputer = SimpleImputer(strategy='mean')
        df[col] = imputer.fit_transform(df[col])

impute_column([['Cylinders']])

impute_column([['MSRP_USD',
       'Invoice_USD', 'EngineSize', 'Horsepower', 'MPG_City',
       'MPG_Highway', 'Weight', 'Wheelbase', 'Length']])

df.info()

"""## Fill missing values of categorical features"""

df[df['Make'].isnull()]

# using mode to fill missing values of categorical features
categorical_columns = ['Make', 'Model', 'Type', 'Origin', 'DriveTrain']
for col in categorical_columns:
    df[col].fillna(df[col].mode()[0], inplace=True)

df.info()

"""# Check Dataset

## Check differnt type of 'Make' Column and their frequencies
"""

df['Make'].value_counts()

"""## All rows where Origin is Asia and Europe"""

df[df['Origin'].isin(['Asia', 'Europe'])]

"""## Top 10 heavy cars (where weight is above 4000)"""

top_10_heavy = df[(df['Weight'] > 4000)].nlargest(10, columns=['Weight'])

top_10_heavy

top_10_heavy.info()

"""#### Most frequent type of heavy cars"""

top_10_heavy['Type'].mode()[0]

"""## Top 10 cars based on price"""

top_10_price = df.nlargest(10, columns=['MSRP_USD']).head(10)
top_10_price

"""## Top 10 cars based on Horsepower"""

top_10_hp = df.nlargest(10, columns=['Horsepower']).head(10)
top_10_hp

"""# Visualization

### Correlation Matrix
"""

correlation_matrix = df[['MSRP_USD', 'Invoice_USD',
       'EngineSize', 'Cylinders', 'Horsepower', 'MPG_City', 'MPG_Highway',
       'Weight', 'Wheelbase', 'Length']].corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap')
plt.show()

"""### Type Distribution"""

plt.figure(figsize = (10,4))
sns.set(style = 'whitegrid')
sns.countplot(x='Type', data = df, palette='Set1')
plt.title("Car's Type Distribution", fontsize = 15)
plt.xlabel('Type', fontsize = 15)
plt.ylabel('Count', fontsize = 15)
plt.show()

"""___________________________________________________
___Pie Chart___
"""

plt.figure(figsize=(8,8))
df['Type'].value_counts().plot(kind='pie', autopct='%1.1f%%')
plt.title('Proportion of Car Types')
plt.ylabel('')
plt.show()

"""### Origin Distribution"""

plt.figure(figsize = (10, 4))
sns.set(style = 'whitegrid')
sns.countplot(x = 'Origin', data = df, palette='Set2')
plt.title("Origin Distribution")
plt.ylabel("Count")
plt.xlabel('Origin')
plt.show()

"""### Distribution of engine size"""

plt.figure(figsize=(10,6))
sns.histplot(data=df, x='EngineSize', bins=20, kde=True)
plt.title('Distribution of Engine Sizes')
plt.xlabel('Engine Size')
plt.ylabel('Frequency')
plt.show()

"""### Distribution of horsepower by origin"""

plt.figure(figsize = (10, 6))
sns.boxplot(x= 'Origin', y = 'Horsepower', data = df)
plt.title("Distribution of Hosepower By Origin")
plt.ylabel("Horsepower")
plt.xlabel("Origin")
plt.show()

"""### Relationship between MSRP_USD and Horsepower"""

plt.figure(figsize = (10, 6))
sns.scatterplot(x = 'Horsepower', y = 'MSRP_USD', data = df)
plt.title("Relationship: Horsepower - MSRP_USD")
plt.ylabel('MSRP_USD')
plt.xlabel("Horsepower")
plt.show()

"""### Distribution of invoice prices by origin"""

plt.figure(figsize=(10,6))
sns.violinplot(data=df, x='Origin', y='Invoice_USD')
plt.title('Distribution of Invoice Prices by Origin')
plt.xlabel('Origin')
plt.ylabel('Invoice Price (USD)')
plt.show()

"""### Scatterplot Matrix"""

sns.pairplot(df[['MSRP_USD', 'Horsepower', 'MPG_City', 'Weight', 'Length']])
plt.show()

"""### Plotting Top 10 Cars based on Price"""

top_10_price

plt.figure(figsize = (16, 10))
top_10_price.plot(kind = 'bar', x='Model', y = 'MSRP_USD')
plt.title("Top 10 Expensive Cars")
plt.ylabel("Price")
plt.xlabel("Model")
plt.legend(fontsize = 8)
plt.show()

"""### Plotting Top 10 Cars based on Weight"""

top_10_heavy

plt.figure(figsize=(10,6))
sns.barplot(data=top_10_heavy, x='Make', y='Weight', palette='viridis')
plt.title('Weight Comparison of Top 10 Cars')
plt.xlabel('Make')
plt.ylabel('Weight')
plt.xticks(rotation=45)
plt.show()

"""___________________________________________
___Wheelbase Comparison of Top 10 Cars___
"""

plt.figure(figsize=(10,6))
top_10_heavy.sort_values(by='Wheelbase', ascending=True).plot(x='Make', y='Wheelbase', kind='line', marker='o')
plt.title('Wheelbase Comparison of Top 10 Cars')
plt.xlabel('Make')
plt.ylabel('Wheelbase')
plt.xticks(rotation=45)
plt.show()

"""### Plotting Top 10 Cars based on Horsepower"""

top_10_hp

plt.figure(figsize=(10,6))
sns.barplot(data=top_10_hp, x='Model', y='Horsepower', palette='viridis')
plt.title('Horsepower Comparison of Top 10 Cars')
plt.xlabel('Make')
plt.ylabel('Horsepower')
plt.xticks(rotation=45)
plt.show()

