# -*- coding: utf-8 -*-
"""Salary_Dataset_DataAnalysis_EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-XEFIg0k0f40nFXtzMqZT4CUY3DwG_qR

# Import Libs
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler

"""# Import Dataset"""

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/DataSet/Salary_Data.csv")

"""# Dataset Analysis"""

df.head()

# Dropping Null Values
df.dropna(inplace=True)

df.info()

"""### Checking Categorical Features"""

for col in df.select_dtypes('object'):
  print(f"{col}'s Unique Value: ")
  print(df[f"{col}"].value_counts())
  print("*" * 30 + "\n")

"""## Resolving Inconsistencies"""

# Resolve Education Level Inconsistency
df['Education Level'].value_counts()

def solve_education_level(s):
  for i in ['Bachelor', 'Master', 'PhD']:
    if i.lower() in s.lower() :
      return i
  return s

df['Education Level'] = df['Education Level'].apply(solve_education_level)

# Let's check .value_counts again to be sure about method's functionality
df['Education Level'].value_counts()

"""## Check Duplicates"""

df.duplicated().sum()

df.pivot_table(index=['Age', 'Gender', 'Education Level', 'Job Title', 'Years of Experience', 'Salary'],
               aggfunc='size').sort_values().to_frame()

"""# Data Analysis

## Distributions
"""

def histplot(df, col):
  plt.figure(figsize=(8, 5))
  plt.hist(df[col], bins='auto', color='cyan', density=True, label=col)
  plt.xlabel(f"{col}", fontsize=12)
  plt.ylabel("Frequncy", fontsize=12)
  plt.show()

for feature in ['Age', 'Years of Experience', 'Salary']:
  histplot(df, feature)

"""## `Age` & `Years of Experience` has effect on `Salary` ?


"""

fig, axes = plt.subplots(nrows=2, ncols=3, figsize=(10, 6))
xfactor = "Age"

for i, yoe in enumerate([1, 3, 5, 7, 9, 11]):
    g = sns.regplot(x=xfactor, y="Salary", ax=axes[i//3, i%3], data=df[df['Years of Experience']==yoe])
    g.set(title=f'YoE = {yoe}')

plt.tight_layout()

"""## Most Popular Jobs"""

popular_jobs = df[['Job Title', 'Salary']].value_counts().nlargest(10).to_frame()
display(popular_jobs)

# Plot
plt.figure(figsize=(12, 6))
sns.barplot(y='Job Title' ,x='Salary', data=popular_jobs,  palette='Set1')
plt.show()

"""## Top Salaries Based On Education Level"""

popular_jobs = df[['Education Level', 'Salary']].value_counts().nlargest(10).to_frame()
display(popular_jobs)

# Plot
plt.figure(figsize=(12, 6))
sns.barplot(y='Salary' ,x='Education Level', data=popular_jobs,  palette='Set1')
plt.xlabel("Education Degree")
plt.ylabel("Salary")
plt.title("Salaries Based On Education Level")
plt.show()

"""## Salaries & `Age` Based on `Education Level`"""

d2 = df.groupby("Education Level").agg({'Salary': 'mean', 'Age': 'mean', 'Years of Experience': 'mean'}).reset_index()

# Display the result
display(d2)

# Plotting
plt.figure(figsize=(12, 6))
ax = sns.barplot(y='Salary', x='Education Level', hue='Years of Experience', data=d2, palette='Set2')

# Add a secondary y-axis for the line plot
ax2 = ax.twinx()
sns.lineplot(x='Education Level', y='Age', data=d2, color='red', ax=ax2, marker='o', label='Age')

# Set labels and title
ax.set_xlabel("Education Degree")
ax.set_ylabel("Salary")
ax2.set_ylabel("Age")
plt.title("Salaries and Ages Based On Education Level")

# Show legend for both plots
lines, labels = ax.get_legend_handles_labels()
lines2, labels2 = ax2.get_legend_handles_labels()
ax.legend(lines + lines2, labels + labels2, loc='upper left')

plt.show()

palett = {'Male': 'lightblue', 'Female': 'pink', 'Other': 'lightgreen'}

sns.lmplot(data=df, x='Years of Experience', y='Salary', hue='Gender', palette=palett, height=3, aspect=1.2)
sns.lmplot(data=df, x='Years of Experience', y='Salary', hue='Education Level', height=3, aspect=1.2)

"""## Pairplot Of `Salary`, `Age`, `Years of Experience`, `Education Level`"""

# Create a pairplot
sns.pairplot(df[['Salary', 'Age', 'Years of Experience', 'Education Level']], hue='Education Level', palette='Set2')
plt.show()

"""## Salary Based On `Gender` & `Age`"""

plt.figure(figsize=(14, 6))
sns.boxplot(x='Age', y='Salary', hue='Gender', data=df)
plt.xlabel("Age")
plt.ylabel("Salary")
plt.title("Salary Comparison Based on Age and Gender")
plt.legend(title='Gender')
plt.show()

df.groupby('Gender')[['Age', 'Salary', 'Years of Experience']].agg({'Age':['mean', 'count'],
                                                                    'Salary':'mean',
                                                                    'Years of Experience':'mean',
                                                                    })

"""1- Age:

* 'Other' gender category has the highest average age (39.57 years), followed by 'Male' (34.42 years) and 'Female' (32.63 years).

2- Sample Size:

* 'Male' category has the largest sample size (3671), while 'Other' has the smallest (14).
'
3- Salary:

* 'Other' category shows slightly higher average salary ($125,870) compared to 'Female' ($107,889) and 'Male' ($121,396).

4- Experience:

* 'Other' category has the highest average years of experience (16.43 years), followed by 'Male' (8.62 years) and 'Female' (7.42 years).

5- Gender Disparity:

* There appears to be a gender disparity in average salary, with 'Male' individuals having higher average salaries.

6- Age-Experience Relationship:

* Individuals in the 'Other' category tend to have higher average age and years of experience compared to 'Female' and 'Male' categories. But important note is that there are just 14 samples with 'Other' category.
"""

df3 = df.groupby('Gender')[['Age', 'Salary', 'Years of Experience']].agg({'Age':['mean', 'count'],
                                                                    'Salary':'mean',
                                                                    'Years of Experience':'mean',
                                                                    })

# Plotting
ax = df3[['Age', 'Salary', 'Years of Experience']].plot(kind='bar', figsize=(10, 6))
ax2 = ax.twinx()
df3['Age']['count'].plot(kind='line', marker='o', linestyle='-', color='r', ax=ax2)

# Set labels and title
ax.set_ylabel('Value')
ax2.set_ylabel('Count')
plt.title('Comparison of Age, Salary, and Years of Experience by Gender')
plt.legend()
# Show the plot
plt.show()

