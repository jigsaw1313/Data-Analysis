# -*- coding: utf-8 -*-
"""Netflix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18_qgTRnNjwMSSAq6ruABqU5NW1DQcmus
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""# Import `Netflix` dataset
### And getting some basic information about daraframe and its structure
"""

df = pd.read_csv('Netflix-Dataset.csv')
df.head()

# check tail
df.tail()

# check datafram structure using df.info()
df.info()

"""_____________________________
* Number of Entries:
1. The DataFrame has a total of 7,789 entries (rows).

* Columns and Data Types:
1. There are 11 columns in the DataFrame.
2. All columns have the data type of object.
3. This suggests that the majority of the data is stored as text (strings).

* Non-Null Counts:
1. The Show_Id, Category, Title, Duration, and Type columns have non-null values for all entries (7789 non-null).
2. Other columns have some missing values, indicated by counts less than 7789.

* Missing Values:
1. Director, Cast, Country, Release_Date, Rating: These columns have missing values, and the count of non-null entries is less than 7789.

"""

# number of nan in each columns
df.isnull().sum()

df.shape

df.size # size of datafram is : columns * rows which is 7789 * 11 : 85679

# check columns names
df.columns

df.describe(include='object')

"""# Data Cleaning"""

# check number of missing values of each columns to determine if it is necessary to filling them or no.
df.isnull().sum()

"""### Drop duplicated values"""

# check for duplicates rows
df.duplicated().sum()

df[df.duplicated()]

# droping duplicate records
df.drop_duplicates(inplace = True)

df[df.duplicated()]
# there are no duplicate values anymore

"""### Change `Release_Date`'s dtype to datatime dtype"""

df['Release_Date'] = pd.to_datetime(df['Release_Date'], format='mixed')

df['Release_Date'].isnull().sum()
# there 10 NaNs for Date(Release_Date) column

df.dtypes
# to be sure that dtype of Release_Date has been changed sucessfully

"""### Filling missing values of `Release_Date`

___The mode represents the central tendency for categorical data and is a common choice for imputing missing values in such cases.___
"""

df['Release_Date'] = df['Release_Date'].fillna(df['Release_Date'].mode()[0])

df.isnull().sum()



"""### Filling missing values of `Rating` column using statistical measurement"""

# number of missing values in Rating column
df['Rating'].isnull().sum()

# check unique values of Rating column
df['Rating'].unique()

# there are 7 rows which have missing values for Rating column
# filling missing values of Rating columns using mode
df['Rating'] = df['Rating'].fillna(df['Rating'].mode()[0])

"""### Handling missing values of `Director`, `Country`, `Cast`

___It doesnt make sense to fill out missing values of these columns using statistical measurement, because their dtype is `Object` so it is not possible to fill them using mean, median.___
___Also using mode is not good approach to fill them as mode will use most frequent value to fill NaNs and it will causes the accuracy and precision of the data to decrease and not be correct___
___So i will add `Unknown` value for these missing values to show that value of them are not known___
"""

df[['Director', 'Cast', 'Country']] = df[['Director', 'Cast', 'Country']].fillna('Unknown')

df.isnull().sum()



"""# Analysis

### ___Get `show_id` and `director` of specific movie or tv show___:
"""

df[(df['Title'] == 'House of Cards')]

"""### ___Filter Movies/Series by Year, Category___"""

def filter_by_year(year, n, category = 'Movie'):
    # n :is number of movies
    return df[(df['Release_Date'].dt.year == year) & (df['Category'] == category)][['Title', 'Director', 'Country', 'Type', 'Rating']].set_index('Title').head(n)

filter_by_year(2017, 5, 'TV Show')

filter_by_year(2011, 5)

"""### ___Filter Movies/Series by Country___

___This function will provide an analysis of shows and movies for a specific country.___
"""

def filter_by_country(country, n):
    # n :is number of movies
    return df[(df['Country'] == country)][['Category','Title', 'Director', 'Country', 'Type', 'Rating']].set_index('Title').head(n)

filter_by_country('Iran', 5)

filter_by_country('Germany', 8)

"""### ___Top Directors___

___This function will return the top directors based on the number of shows or movies they have in the dataset.___
"""

def top_directors(df, n=5):
    return df['Director'].value_counts().head(n)

top_directors(df)

"""### ___Number of Moves/Tv Shows release per year___"""

def release_year_analysis(df):
    df['Release_Year'] = df['Release_Date'].dt.year
    return df['Release_Year'].value_counts().sort_index()

release_year_analysis(df)

"""### ___`Cast` Analysis by creating new df of Casts and show number of Movies/Tv Shows that they have participated___

___The cast_counts DataFrame will show the count of movies and tv shows for each cast member.___
"""

def cast_analysis(df):
    # Create a DataFrame with individual cast members
    cast_df = pd.DataFrame(df['Cast'].apply(lambda x: str(x).split(',')).explode().str.strip())
    cast_df[['Name', 'Family']] = cast_df['Cast'].str.split(n=1, expand=True)     # Split name and family into separate columns
    cast_df = cast_df.drop_duplicates()          # Drop duplicates

    # Merge cast_df with the original DataFrame 'df' to get the Type (Movie/TV Show) for each cast member
    cast_df = cast_df.merge(df[['Cast']], left_on='Cast', right_on='Cast', how='left')

    # Group by name, family, count occurrences, and reset index
    cast_counts = cast_df.groupby(['Name', 'Family']).size().reset_index(name='Count').set_index(['Name', 'Family'])

    return cast_counts.sort_values(by = 'Count', ascending = False)
    """
    director_df.groupby('Director'): groups the DataFrame cast_df by the 'Name', 'Family'. It creates a group for each unique cast.
    ----------------------------------------------------------------------------------
    .size(): This method calculates the size (number of occurrences) of each group.
    ----------------------------------------------------------------------------------
    .reset_index(name='Count'): This part resets the index of the resulting DataFrame and gives a name ('Count') to the column that represents the size of each group.
    ----------------------------------------------------------------------------------
    .set_index('Director'): This code sets the 'Director' column as the new index of the DataFrame.
    """

cast_analysis(df)

"""### ___Creating new dataframe by using `cast_analysis` function___"""

cast_counts = cast_analysis(df)

cast_counts.head(10)

"""### ___`Director` Analysis by showing number of Movies/TV Shows that they have produced___

___This function counts the total number of movies and TV shows produced by each individual director by disregarding those records where director is Unknown___
"""

def director_production_count(df):
    # Filter out entries with 'Unknown' directors
    filtered_df = df[df['Director'] != 'Unknown']
    # Create a DataFrame with each unique directors
    director_df = pd.DataFrame(filtered_df['Director'].apply(lambda x: str(x).split(',')).explode().str.strip())
    # Count the total number of movie and TV show produced by each director
    director_production_counts = director_df.groupby('Director').size().reset_index(name='Count').set_index('Director')

    return director_production_counts.sort_values(by = 'Count', ascending = False)
    """
    director_df.groupby('Director'): groups the DataFrame director_df by the 'Director' column. It creates a group for each unique director.
    ----------------------------------------------------------------------------------
    .size(): This method calculates the size (number of occurrences) of each group.
    ----------------------------------------------------------------------------------
    .reset_index(name='Count'): This part resets the index of the resulting DataFrame and gives a name ('Count') to the column that represents the size of each group.
    ----------------------------------------------------------------------------------
    .set_index('Director'): This code sets the 'Director' column as the new index of the DataFrame.
    """

director_production_count(df)

"""### ___Creating new dataframe by using `director_production_count` function___"""

director_production_count = director_production_count(df)
director_production_count.head(10)

"""### ___`Type` Analysis by showing number of each type(genre)___"""

def type_count(df):
    # Creating new df by spliting genres in Type column
    type_df = pd.DataFrame(df['Type'].apply(lambda x: str(x).split(',')).explode().str.strip())
    type_df = type_df.drop_duplicates() # to drop duplicate genres
    type_df = type_df.merge(df['Type'], left_on = 'Type', right_on='Type', how = 'left') # merge
    type_count = type_df.groupby('Type').size().reset_index(name = 'Count').set_index('Type')
    return type_count.sort_values(by = 'Count', ascending = False)
    """
    director_df.groupby('Director'): groups the DataFrame type_df by the 'Director' column. It creates a group for each unique type.
    ----------------------------------------------------------------------------------
    .size(): This method calculates the size (number of occurrences) of each group.
    ----------------------------------------------------------------------------------
    .reset_index(name='Count'): This part resets the index of the resulting DataFrame and gives a name ('Count') to the column that represents the size of each group.
    ----------------------------------------------------------------------------------
    .set_index('Director'): This code sets the 'Director' column as the new index of the DataFrame.
    """

type_count(df)

"""### ___Creating new dataframe by using `type_count` function___"""

type_count = type_count(df)
type_count.head(10)

"""### ___Seperating Movies & TV Shows___"""

movies = df[(df['Category'] == 'Movie')] # filtering by category
movies.reset_index(drop=-1) # dropping original index to set new index
movies.head() # show head of movies dataframe

movies.info()

movies.shape

"""#### __Series__"""

series = df[(df['Category'] == 'TV Show')]
series.reset_index(drop = -1)
series.head()

series.info()

series.shape

"""# Visualization

### ___Number of Movies/Series Per Year___
"""

show_per_year = df.groupby(df['Release_Date'].dt.year).agg({'Show_Id': 'count'}).sort_values(by = 'Show_Id', ascending=False)

show_per_year

show_per_year.plot(kind = 'bar', figsize=(12, 8))
plt.title("Movies/Series Produced Per Year")
plt.xlabel("Year")
plt.ylabel("Number")
plt.show()

# Another way to show number of Movies/Series produced per year:
# df['Release_Date'].dt.year.value_counts().to_frame()

"""### ___Number of Movies/Series in dataframe___"""

df.groupby('Category')['Category'].count().to_frame()

plt.figure(figsize=(12, 8))
sns.countplot(x=df['Category'], palette='Set2')
plt.title('Number of Series/Movies in Dataset', fontsize = 20)
plt.xlabel("Movie/Serie", fontsize = 15)
plt.ylabel("Count", fontsize = 15)
plt.show()

"""### Top 10 types (Genre) based on `type_count`"""

plt.figure(figsize = (12, 12))
type_count.head(10).plot(kind = 'bar')
plt.title("Number of Genres", fontsize = 15)
plt.xlabel("Types (Genres)", fontsize = 10)
plt.ylabel("Frequency", fontsize = 10)
plt.show()

"""### Top 10 Directors based on `director_production_count`"""

plt.figure(figsize = (16, 12))
director_production_count.head(10).plot(kind = 'bar')
plt.title("Top 10 Directors", fontsize = 15)
plt.xlabel("Director", fontsize = 10)
plt.ylabel('Frequency', fontsize = 10)
plt.show()

"""### Top 10 Actors based on `casts_count`"""

plt.figure(figsize = (16, 12))
ax = cast_counts.head(10).plot(kind='bar', color='skyblue', rot=45, fontsize=10, legend=True)
ax.bar_label(ax.containers[0], fontsize=10, color='black')
plt.title("Top 10 Actors", fontsize = 15)
plt.xlabel("Actor", fontsize = 10)
plt.ylabel('Frequency', fontsize = 10)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

"""### Distribution of `Rating` column

___Pie Chart___
"""

plt.figure(figsize=(12, 12))
df['Rating'].value_counts().plot(kind='pie', autopct='%1.1f%%', startangle=90, cmap='viridis')
plt.title('Distribution of Ratings')
plt.show()

"""___Line Chart___"""

plt.figure(figsize = (12, 6))
ax = df['Rating'].value_counts().plot(kind = 'bar', color = 'green', rot = 45)
ax.bar_label(ax.containers[0], fontsize=10, color='black')
plt.title("Distribution of Rating", fontsize = 15)
plt.xlabel('Rating', fontsize = 10)
plt.ylabel("Frequency", fontsize = 10)
plt.grid(axis = 'y', linestyle = '--', alpha = 0.6)
plt.tight_layout()
plt.show()

"""### Line chart of `Release_Date` over time"""

plt.figure(figsize=(12, 6))
counts_by_year = df['Release_Year'].value_counts().sort_index()
counts_by_year.plot(kind='line', marker='o', color='orange')
plt.title('Number of Releases Over Time', fontsize = 15)
plt.xlabel('Year', fontsize =10)
plt.ylabel('Count', fontsize =10)
plt.yticks(range(1, counts_by_year.max(), 200))
plt.show()

"""### ___Top 10 Countries Distribution___"""

plt.figure(figsize = (12, 8))
sns.countplot(x = 'Country', data = df, order = df['Country'].value_counts().index[:10],palette='Set2')
plt.title("Top 10 Countries Distribution")
plt.xlabel("Country")
plt.ylabel("Frequency")
plt.xticks(rotation = 45, ha= 'right')
plt.show()

"""### ___`Release_Year` Vs `Rating` boxplot___"""

plt.figure(figsize=(12, 6))
sns.boxplot(x='Release_Year', y='Rating', data=df, palette='pastel')
plt.title('Release Year vs. Rating')
plt.xlabel('Release Year')
plt.ylabel('Rating')
plt.xticks(rotation=45, ha='right')
plt.show()

"""### ___Distribution Of Movies/TV Shows released for each month___"""

plt.figure(figsize=(12, 6))
sns.countplot(x=df['Release_Date'].dt.month_name(), order=['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'], palette='Blues')
plt.title('Distribution of Release Months')
plt.xlabel('Month')
plt.ylabel('Count')
plt.show()

"""### `Duration` Distribution of `movies` dataframe"""

movies['Duration'] = movies['Duration'].str.extract('(\d+)')
movies['Duration'] = pd.to_numeric(movies['Duration'])

plt.figure(figsize = (12, 6))
sns.histplot(movies['Duration'], bins = 250, kde = True, color = 'salmon')
plt.title("Distribution of Movies Duration", fontsize = 20)
plt.xlabel("Duration", fontsize = 15)
plt.ylabel("Frequency", fontsize = 15)
plt.show()

"""### ___Duration Distribution of `series` dataframe___"""

plt.figure(figsize = (12, 6))
sns.countplot(x = 'Duration', data = series, order = series['Duration'].value_counts().index ,palette='Set2')
plt.title("TV Shows Seasons")
plt.xlabel("Season")
plt.ylabel("Frequency")
plt.xticks(rotation = 45, ha= 'right')
plt.yticks(range(0, max(series['Duration'].value_counts()) + 1, 100))
plt.show()

