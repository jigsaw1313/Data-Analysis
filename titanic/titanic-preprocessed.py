# -*- coding: utf-8 -*-
"""titanic_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FjD6I5-DG58EtGB6hnlIagdd1O1THbFj
"""

# Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from sklearn.preprocessing import LabelEncoder, MinMaxScaler, StandardScaler, KBinsDiscretizer

# Laoding Dataset
df = pd.read_csv('https://raw.githubusercontent.com/PeterLOVANAS/Titanic-machine-learning-project/main/datasets/Titanic_dataset_com.csv')

df.info()

df.describe()

df.head()

"""# Solving Missing Values

### Drop rows which are all NaNs
"""

df.dropna(how = 'all', inplace = True)

df.info()

"""#### Age"""

df_age_median = df.groupby(['sex', 'pclass'])['age'].median().reset_index()
df_age_median

def impute_age(row):
    condition = (
        (df_age_median['sex'] == row['sex']) &
        (df_age_median['pclass'] == row['pclass'])
    )
    # Check if there are rows that meet the condition
    if condition.any():
        return df_age_median[condition]['age'].values[0]
    else:
        # Handle the case where there are no matching rows
        return None

# Apply the impute_age function to fill missing values in 'Age' column
df['age'] = df.apply(lambda row: impute_age(row) if pd.isnull(row['age']) else row['age'], axis=1)

"""__________________________

#### Fare
"""

df.info()

df.dropna(subset = ['fare'], inplace = True)

"""________________________

#### Cabin
"""

# Fill missing "Cabin" values based on passenger class
class_cabin_mapping = df.groupby('pclass')['cabin'].transform(lambda x: x.fillna(x.mode()[0]))
# Update the "Cabin" column with the imputed values
df['cabin'] = class_cabin_mapping

df['Cabin_Deck'] = df['cabin'].str[0]
df['Has_Cabin'] = df['cabin'].notna().astype(int)
df.drop(columns=['cabin'], inplace = True)

df.info()

"""_______________________

#### Embarked
"""

df.fillna(value={'embarked': df['embarked'].mode()[0]}, inplace= True)

"""______________

#### Boat

***NaNs Value of boat and survived : 1***
"""

# condition for filling missing values
condition = (df['survived'] == 1) & (df['boat'].isnull())

# Calculate the mode of the "boat" column
boat_mode = df['boat'].mode()[0]

# Use fillna() to replace missing values based on the condition
df.loc[condition, 'boat'] = boat_mode

"""***NaNs Value of boat and survived : 0***"""

#imputing based on Pclass and Sex
boat_mode_by_class_sex = df.groupby(['pclass', 'sex'])['boat'].transform(lambda x: x.mode()[0])
df['boat'].fillna(boat_mode_by_class_sex, inplace=True)

df.info()

"""____________

#### Body & Home.dest
"""

df.drop(columns=['body', 'home.dest'], inplace = True)

"""# Data Reduction & Data Transformation

### Data Discretization
"""

def k_bins_discretizer(df, columns, n_bins, encode, strategy):
    dis = KBinsDiscretizer(n_bins=n_bins, encode=encode, strategy=strategy)
    for col in columns:
        df[col] = dis.fit_transform(df[[col]])
        df = df.astype({col: 'int'})
    return df

df = k_bins_discretizer(df, columns=['age', 'fare'], n_bins=5, encode='ordinal', strategy='uniform')

df.head()

"""## One-Hot Encoding"""

def one_hot(df, columns):
    return pd.get_dummies(df, columns=columns, dtype='int')

df = one_hot(df, columns=['sex'])

df.head()

"""## LabelEncoding"""

def labelencoder(df, columns):
    le = LabelEncoder()
    for col in columns:
        df[col] = le.fit_transform(df[col])
    return df

df = labelencoder(df, columns=['Cabin_Deck'])

df.head()

"""## Drop Un-Necessary Columns"""

df.drop(columns=['ticket', 'PassengerId'], inplace = True)

"""## Correct Datatypes"""

def change_data_type(df):
    df = df.astype({'pclass' : 'int', 'survived' : 'int', 'age': 'int', 'sibsp' :'int', 'parch': 'int', 'fare': 'int'})
    return df

change_data_type(df)

df['embarked'] = df['embarked'].astype('category')

df.head()

"""## Name Format"""

df[['last_name', 'title', 'first_name', 'middle_name']] = df['name'].str.split(', |\.', expand=True)
df.drop(columns=['name', 'middle_name'], inplace = True)
df.head()

"""## Columns Order"""

df = df[['title', 'last_name', 'first_name', 'pclass', 'survived', 'sex_female', 'sex_male', 'age', 'sibsp', 'parch', 'fare', 'embarked',
                 'boat', 'Cabin_Deck', 'Has_Cabin']]

df.head()



"""# Data Exploration

### Survival Distribution
"""

sns.set(style="whitegrid")
sns.countplot(x = 'survived', data = df, palette = 'Set1')    # creating coundplot
plt.title("Survival Distribution (0: No, 1: Yes)")            # set title for countplot
plt.ylabel("Survived")                                        # title of y-axis
plt.xlabel("Count")                                           # title of x-axis
plt.show()

"""### pclass Distribution"""

sns.set(style = 'whitegrid')
sns.countplot(x = 'pclass', data = df , palette = 'Set1')
plt.title("Passenger Class Distribution")
plt.ylabel('Count')
plt.xlabel("Class")
plt.show()

"""### Correlation Matrix"""

corr_df = df[['pclass','survived', 'sex_female', 'sex_male', 'age', 'sibsp','parch', 'fare','Cabin_Deck', 'Has_Cabin']].corr()
plt.figure(figsize = (16, 8))
sns.heatmap(data = corr_df, annot = True, cmap = 'coolwarm')
plt.show()

