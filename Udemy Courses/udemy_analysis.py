# -*- coding: utf-8 -*-
"""udemy-analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JfEayZV5hA64GZz4807NVvqorrDPrxXn

# Udemy courses dataset
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""# Load dataset and first evaluation of df"""

df = pd.read_csv('Udemy-Dataset.csv')

df.head()

# genegral information about dataset
df.info()

df.columns

# check some statistical analysis of the dataset using describe method
df.describe()

# check str columns
df.select_dtypes(include='object')

# check missing values
df.isnull().sum()

# number of unique values
df.nunique()

"""# Data Cleaning  
__Correcting feature's dtypes and values__

### Check duplicates values
"""

# check duplicats
df.duplicated().sum()

# drop duplicate rows
df.drop_duplicates(inplace = True)

"""### Correct dtype of `published_timestamp`"""

# changing published_timestamp dtype to datetime
df['published_timestamp'] = pd.to_datetime(df['published_timestamp'])

"""#### ___Seperating Date from 'published_timestamp' column___"""

df['Date'] = df['published_timestamp'].dt.date

# changint Date & Time dtype to datetime
df['Date'] = pd.to_datetime(df['Date'])
df['Date'] = df['Date'].dt.year

df.info()

"""### Correcting `price` column"""

# Convert numeric values to int and mark 'Free' courses
df['price'] = pd.to_numeric(df['price'], errors='coerce')  # Convert to numeric, coerce errors to NaN

# filling NaN values of price column to 0 indicating that course is free of charge
df['price'] = df['price'].fillna(0)

# check if correction has been reflected on df
df[df['is_paid'] == False]

"""### Correcting `content_duration` values and dtypes to minutes"""

def extract_numeric_value(value):
    try:
        if 'hour' in value or 'hours' in value:
            return pd.to_numeric(value.split()[0]) * 60
        elif 'min' in value or 'mins' in value:
            return pd.to_numeric(value.split()[0])
        else:
            return None
    except Exception as e:
        print(f"Error: {e}")
        return None

df['content_duration'] = df['content_duration'].apply(extract_numeric_value)

# check if previous function has been affected correctly
df.iloc[3672]

# check if previous function has been affected correctly
df.iloc[4]

"""# Renaming columns and reorder them"""

df.info()

# drop unuseable columns
df.drop(columns= ['published_timestamp'], inplace = True)

df = df.rename(columns= {
    'course_id' : 'id',
    'course_title' : 'title',
    'num_subscribers' : 'subscribes',
    'num_reviews' : 'reviews',
    'num_lectures' : 'lectures',
    'content_duration' : 'duration_minutes',
    'Date' : 'publish_date'
})

# re-oder them
df = df[['id', 'title', 'subject', 'level', 'duration_minutes', 'lectures', 'price', 'is_paid', 'subscribes', 'reviews', 'publish_date']].reset_index(drop = True)

df.head()

"""____________________________________

# Analyzing dataframe's features values
"""

df.hist(figsize = (20, 8), bins = 100)

"""### All unique values for `subjects` column"""

df['subject'].unique()

"""### Subjects which have most number of courses on `subject` column"""

df['subject'].value_counts()

"""### All free courses"""

df[(df['is_paid'] == False)]

# create new datafram of free courses
free = df[(df['is_paid'] == False)].reset_index()
free.head()

"""### All paid courses"""

df[(df['is_paid'] == True)]

# create new dataframe of paid courses
paid = df[(df['is_paid'] == True)].reset_index()

"""### Top selling courses"""

df.sort_values(by='subscribes', ascending = False)

"""### Zero subscribes courses"""

df[(df['subscribes'] == 0)]

"""### Show all the courses related to python"""

df[df['title'].str.contains('Python')]#.head()

"""### Maximum number of subscribers of `subscribers` column for each level of `level` column"""

df.groupby('level')['subscribes'].max()

"""# Functions to get information from df

### Function to get top courses based on user demand
"""

def get_top_records(df, n, by):
    return df.sort_values(by = by, ascending = False).head(n)

get_top_records(df, 10, 'price')

get_top_records(df, 5, 'subscribes')

"""### Search courses based on specific criteria

**search_course() parameters:**   
  
_`df`_: Dataframe  
_`subject`_ : This parameter indicates the subject of the course you are looking for.  
_`is_paid`_ : whether course is free or paid.  (default value is True)  
_`n`_ : number of rows which you prefer to be return as output.  
_`ascending`_ : results shown in ascending or not.  
_`min_price`_ : minimum price (default is 0).  
_`max_price`_ : minimum price (default is 200).602

**Possible values for subject parameter:**  
- Web Development  
- Business Finance  
- Musical Instruments  
- Graphic Design
"""

def search_course(df, subject, sort_by, is_paid = True, n = 20, ascending = False, min_price = 0, max_price = 200):
    return df[(df['subject'] == subject) & (df['is_paid'] == is_paid) & (df['price'] >= min_price) & (df['price'] <= max_price)].sort_values(by = sort_by, ascending = ascending).head(n)

search_course(df, 'Web Development', 'price', True, 70, 90)

search_course(df = df, sort_by='subscribes', subject = 'Business Finance')

"""# Visualization

### Correlation heatmap
"""

plt.figure(figsize = (20, 7))
sns.heatmap(df.corr(numeric_only=True), annot = True, cmap = 'coolwarm')
plt.title("Correlation Heatmap")
plt.show()

"""### Stacked bar plot for subject/level

"""

level_per_subj = df.groupby(['subject'])['level'].value_counts().to_frame()
level_per_subj

# Reset index to make 'subject' and 'level' as columns
df_reset = level_per_subj.reset_index()

plt.figure(figsize=(12, 8))
sns.barplot(x='count', y='subject', hue='level', data=df_reset, palette='viridis')
plt.title('Count of Courses by Subject and Level', fontsize=20)
plt.xlabel('Count', fontsize=15)
plt.ylabel('Subject', fontsize=15)
plt.legend(title='Level', title_fontsize='12')
plt.show()

plt.figure(figsize=(18, 12))
df_reset.pivot_table(values='count', index='subject', columns='level', aggfunc='sum').plot(kind='bar', stacked=False, colormap='viridis')
plt.title('Count of Courses by Subject and Level', fontsize=20)
plt.xlabel('Subject', fontsize=15)
plt.ylabel('Count', fontsize=15)
plt.legend(title='Level', title_fontsize='12')
plt.show()

"""### Courses per year"""

courses_per_year = df.groupby('publish_date')['publish_date'].agg({'count', 'mean'})
courses_per_year

plt.figure(figsize = (16, 8))
courses_per_year['count'].plot(kind = 'bar')
plt.title("Courses Per Year", fontsize = 20)
plt.xlabel("Year", fontsize = 15)
plt.ylabel("Number Of Courses Per Year", fontsize = 15)
plt.show()

"""### Using boxplot to check outliers"""

df.boxplot(figsize = (18, 10))

"""### Histogram chart of for each numeric feature of `df`"""

def hist_chart(cols):
    for col in cols:
        df[col].plot(kind='hist', bins=100, edgecolor='black', figsize=(12, 6))
        plt.title(f'Distribution of Course {col}')
        plt.xlabel(f'{col}')
        plt.ylabel('Frequency')
        plt.show()

hist_chart(['duration_minutes', 'lectures', 'price', 'subscribes', 'reviews'])

"""### Distribution of `subject` column"""

df['subject'].value_counts().plot(kind='bar', color='black', figsize=(12, 6))
plt.title('Distribution of Subjects')
plt.xlabel('Subject')
plt.ylabel('Count')
plt.show()

"""### Pie chart of `is_paid` column"""

plt.figure(figsize = (12, 8))
df['is_paid'].value_counts().plot(kind='pie', autopct='%1.1f%%', colors=['lightcoral', 'lightskyblue'])
plt.title('Distribution of Paid and Free Courses')
plt.ylabel('')
plt.show()

"""### Pairplot for numerical features"""

sns.pairplot(df[['duration_minutes', 'lectures', 'price', 'subscribes', 'reviews']])
plt.suptitle('Pairplot of Numeric Variables', y=1.02)
plt.show()



